from typing import Dict, Any, List
import os
from datetime import datetime
from ollama_client import OllamaClient


def generate_markdown_report(result: Dict[str, Any], use_ollama: bool = True) -> str:
    """
    Generate a markdown report from research results.
    
    Args:
        result: Research result dictionary from ResearchAgent.ask()
        use_ollama: Whether to use Ollama for enhanced report generation
        
    Returns:
        Markdown formatted report
    """
    question = result['question']
    answer = result['answer']
    subqueries = result['subqueries']
    citations = result['citations']
    
    # Try to generate enhanced intro with Ollama
    intro = ""
    if use_ollama:
        try:
            ollama_client = OllamaClient()
            if ollama_client.is_available():
                intro = ollama_client.generate_report_intro(question)
        except:
            pass
    
    # Generate report
    report_lines = [
        "# Research Report",
        "",
        f"**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "",
        f"## Question",
        f"{question}",
        ""
    ]
    
    # Add enhanced intro if available
    if intro:
        report_lines.extend([
            "## Executive Summary",
            intro,
            ""
        ])
    
    report_lines.extend([
        "## Answer",
        answer,
        "",
        "## Research Process",
        "",
        "### Subqueries Investigated",
        ""
    ])
    
    # Add subqueries
    for i, subquery_result in enumerate(subqueries, 1):
        report_lines.extend([
            f"#### {i}. {subquery_result['subquery']}",
            "",
            subquery_result['summary'],
            "",
        ])
    
    # Add citations
    if citations:
        report_lines.extend([
            "## Sources",
            "",
            "The following documents were consulted during this research:",
            ""
        ])
        
        for i, citation in enumerate(citations, 1):
            report_lines.extend([
                f"### {i}. {citation['title']}",
                f"**File:** {citation['filename']}",
                f"**Relevance Score:** {citation['score']:.3f}",
                "",
                f"**Excerpt:**",
                f"> {citation['snippet']}",
                "",
                "---",
                ""
            ])
    
    # Add footer
    report_lines.extend([
        "",
        "---",
        "",
        f"*This report was generated by a multi-hop research agent using Chroma for document retrieval.*",
        f"*Total documents consulted: {len(citations)}*"
    ])
    
    return "\n".join(report_lines)


def save_report(report: str, filename: str = None) -> str:
    """
    Save markdown report to file.
    
    Args:
        report: Markdown report content
        filename: Output filename (optional)
        
    Returns:
        Path to saved file
    """
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"research_report_{timestamp}.md"
    
    # Ensure reports directory exists
    os.makedirs("reports", exist_ok=True)
    
    filepath = os.path.join("reports", filename)
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(report)
    
    return filepath


def format_citations_for_display(citations: List[Dict[str, Any]], max_display: int = 10) -> str:
    """
    Format citations for display in web interface.
    
    Args:
        citations: List of citation dictionaries
        max_display: Maximum number of citations to display
        
    Returns:
        Formatted citation string
    """
    if not citations:
        return "No sources found."
    
    citation_lines = ["**Sources consulted:**", ""]
    
    for i, citation in enumerate(citations[:max_display], 1):
        citation_lines.extend([
            f"{i}. **{citation['title']}** (Score: {citation['score']:.3f})",
            f"   File: {citation['filename']}",
            f"   {citation['snippet']}",
            ""
        ])
    
    if len(citations) > max_display:
        citation_lines.append(f"... and {len(citations) - max_display} more sources")
    
    return "\n".join(citation_lines)


if __name__ == "__main__":
    # Test the report generation
    sample_result = {
        'question': 'What are the best machine learning algorithms?',
        'answer': 'Based on research, the best machine learning algorithms depend on the specific use case...',
        'subqueries': [
            {
                'subquery': 'what are machine learning algorithms',
                'summary': 'Machine learning algorithms are computational methods...',
                'documents': []
            }
        ],
        'citations': [
            {
                'title': 'Introduction to Machine Learning',
                'filename': 'ml_intro.txt',
                'score': 0.85,
                'snippet': 'Machine learning is a subset of artificial intelligence...'
            }
        ]
    }
    
    # Generate report
    report = generate_markdown_report(sample_result)
    print("Generated Report:")
    print("=" * 50)
    print(report)
    
    # Save report
    filepath = save_report(report, "test_report.md")
    print(f"\nReport saved to: {filepath}")
